# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_DatasetConstruction.ipynb (unless otherwise specified).

__all__ = ['makeEditOpsFile', 'DATA_SMALL_METHODS_TRAIN_BUGGY', 'DATA_SMALL_METHODS_TRAIN_FIXED',
           'DATA_SMALL_METHODS_VALID_BUGGY', 'DATA_SMALL_METHODS_VALID_FIXED', 'DATA_SMALL_METHODS_TEST_BUGGY',
           'DATA_SMALL_METHODS_TEST_FIXED', 'DATA_SMALL_OPS_BASIC_TRAIN', 'DATA_SMALL_OPS_BASIC_VALID',
           'DATA_SMALL_OPS_STRICT_TRAIN', 'DATA_SMALL_OPS_STRICT_VALID', 'DATA_SMALL_OPS_LOOSE_TRAIN',
           'DATA_SMALL_OPS_LOOSE_VALID']

# Cell
#hide
from typing import Callable, List
from copy import deepcopy

import sys
sys.path.append("..")

from .EditOperations import *
from .CondenseEditOperations import *
from .IOUtils import *

# Cell
def makeEditOpsFile(
    abstractSourceFile: str,
    abstractTargetFile: str,
    editOpsFile: str,
    condenser: Callable[[List[EditOperation]], List[CompoundOperation]]
) -> None:
    """
    Determines the list of CompoundEditOperations between abstract methods given in `abstractSourceFile` and
    `abstractTargetFile`, then writes those operations in machine format to the given `editOpsFile`. The conversion
    process is done with the given `condenser` function, which should be a function provided in the
    `CondenseEditOperations` module.
    """

    # get the abstract methods
    sourceMethods = readAbstractMethodsFromFile(abstractSourceFile)
    targetMethods = readAbstractMethodsFromFile(abstractTargetFile)

    # make sure the number of abstract methods in both files are equal
    if len(sourceMethods) != len(targetMethods):
        raise ValueError("makeDataset: number of methods differ in source and target files!")

    # determine edit operations
    operations = []
    for sourceMethod, targetMethod in zip(sourceMethods, targetMethods):
        operations.append(condenser(sourceMethod.getEditOperationsTo(targetMethod)))

    # write the edit operations to the file
    writeCompoundOperationsToFile(editOpsFile, operations)

# Cell
# abstract method files
DATA_SMALL_METHODS_TRAIN_BUGGY = "../data/small/abstract_methods/train_buggy.txt"
DATA_SMALL_METHODS_TRAIN_FIXED = "../data/small/abstract_methods/train_fixed.txt"

DATA_SMALL_METHODS_VALID_BUGGY = "../data/small/abstract_methods/valid_buggy.txt"
DATA_SMALL_METHODS_VALID_FIXED = "../data/small/abstract_methods/valid_fixed.txt"

DATA_SMALL_METHODS_TEST_BUGGY  = "../data/small/abstract_methods/test_buggy.txt"
DATA_SMALL_METHODS_TEST_FIXED  = "../data/small/abstract_methods/test_fixed.txt"

# Cell
# edit operation files
DATA_SMALL_OPS_BASIC_TRAIN = "../data/small/edit_ops/basic/train.txt"
DATA_SMALL_OPS_BASIC_VALID = "../data/small/edit_ops/basic/valid.txt"

DATA_SMALL_OPS_STRICT_TRAIN = "../data/small/edit_ops/strict/train.txt"
DATA_SMALL_OPS_STRICT_VALID = "../data/small/edit_ops/strict/valid.txt"

DATA_SMALL_OPS_LOOSE_TRAIN = "../data/small/edit_ops/loose/train.txt"
DATA_SMALL_OPS_LOOSE_VALID = "../data/small/edit_ops/loose/valid.txt"